import{_ as k,c as u,a3 as r,j as t,G as a,w as i,B as o,o as p,a as l}from"./chunks/framework.BaR4VHXY.js";const P=JSON.parse('{"title":"分布式消息队列kafka","description":"","frontmatter":{"Created at":"2019-05-24T00:00:00.000Z","Last updated at":"2019-05-24T00:00:00.000Z","tags":["大数据","kafka"]},"headers":[],"relativePath":"zh-CN/学习笔记/分布式消息队列kafka.md","filePath":"zh-CN/学习笔记/分布式消息队列kafka.md","lastUpdated":null}'),c={name:"zh-CN/学习笔记/分布式消息队列kafka.md"};function f(m,e,h,g,b,q){const n=o("groupId"),s=o("artifactId"),d=o("dependency");return p(),u("div",null,[e[6]||(e[6]=r('<h1 id="分布式消息队列kafka" tabindex="-1">分布式消息队列kafka <a class="header-anchor" href="#分布式消息队列kafka" aria-label="Permalink to &quot;分布式消息队列kafka&quot;">​</a></h1><h2 id="分布式消息队列kafka-1" tabindex="-1">分布式消息队列kafka <a class="header-anchor" href="#分布式消息队列kafka-1" aria-label="Permalink to &quot;分布式消息队列kafka&quot;">​</a></h2><h4 id="什么是消息队列-为什么使用消息队列" tabindex="-1">什么是消息队列？为什么使用消息队列？ <a class="header-anchor" href="#什么是消息队列-为什么使用消息队列" aria-label="Permalink to &quot;什么是消息队列？为什么使用消息队列？&quot;">​</a></h4><p>消息传输过程中的容器统一称为消息队列。 ![[../_resources/unknown_filename-cd88910d.png]] 用户注册成功之后需要做一系列的操作，以前是串行一次执行操作，加入某个操作延时，会导致用户体验度下降。引入消息队列之后，各种操作自己去消息队列中消费消息，可以并行的执行对应操作。消息队列可以保持消息的先后顺序。并且可以识别消息是否被消费。防止重复发邮件的发短信的异常情况。</p><table tabindex="0"><thead><tr><th>特性</th><th>ActiveMQ</th><th>RabbitMQ</th><th>RocketMQ</th><th>kafka</th></tr></thead><tbody><tr><td>单机吞吐量</td><td>万级</td><td>万级</td><td>10万级</td><td>10万级(大数据场景)</td></tr><tr><td>topic数量对吞吐量的影响</td><td>无</td><td>无</td><td>topic可达几百/几千的级别,吞吐量会有小幅下降,这一点是rocketMQ的一大优势</td><td>topic可达几十/几百的级别,吞吐量会有大幅下降，加入要支持大规模的topic，需要增加机器资源</td></tr><tr><td>时效性</td><td>ms级</td><td>us级</td><td>ms级</td><td>ms级以内</td></tr><tr><td>可用性</td><td>高</td><td>高</td><td>非常高,分布式</td><td>非常高,分布式,一个数据多个副本</td></tr><tr><td>消息可靠性</td><td>有较低的概率丢失消息</td><td>有较低的概率丢失消息</td><td>可以做到零丢失</td><td>可以做到零丢失</td></tr><tr><td>功能支持</td><td>MQ领域的功能极其完善</td><td>MQ领域的功能极其完善</td><td>MQ领域的功能较为完善</td><td>支持简单的MQ功能,一般用于大数据,实时计算及日志采集</td></tr></tbody></table><h4 id="kafka简介" tabindex="-1">kafka简介 <a class="header-anchor" href="#kafka简介" aria-label="Permalink to &quot;kafka简介&quot;">​</a></h4><p>kafka是阿帕奇组织顶级项目。是一个分布式的流处理平台。 kafka是一个被用来构建实时数据管道和流媒体应用的框架。是一个水平扩展的，高容错的，贼快的，已经在数千家公司中得到应用。 ![[../_resources/unknown_filename-d5b870fe.png]] ![[../_resources/unknown_filename-5c2e0f63.png]]</p><table tabindex="0"><thead><tr><th>Kafka名词解释</th><th>工作方式</th></tr></thead><tbody><tr><td>Producer</td><td>消息生产者，就是向kafka broker发消息的客户端。</td></tr><tr><td>Consumer</td><td>消息消费者，向kafka broker取消息的客户端</td></tr><tr><td>Topic</td><td>主题，可以理解为一个队列。</td></tr><tr><td>Consumer Group (CG)</td><td>这是kafka用来实现一个topic消息的广播（发给所有的consumer）和单播（发给任意一个consumer）的手段。一个topic可以有多个CG。topic的消息会复制（不是真的复制，是概念上的）到所有的CG，但每个partion只会把消息发给该CG中的一个consumer。如果需要实现广播，只要每个consumer有一个独立的CG就可以了。要实现单播只要所有的consumer在同一个CG。用CG还可以将consumer进行自由的分组而不需要多次发送消息到不同的topic。</td></tr><tr><td>Broker</td><td>一台kafka服务器就是一个broker。一个集群由多个broker组成。一个broker可以容纳多个topic。</td></tr><tr><td>Partition</td><td>为了实现扩展性，一个非常大的topic可以分布到多个broker（即服务器）上，一个topic可以分为多个partition，每个partition是一个有序的队列。partition中的每条消息都会被分配一个有序的id（offset）。kafka只保证按一个partition中的顺序将消息发给consumer，不保证一个topic的整体（多个partition间）的顺序。</td></tr><tr><td>Offset</td><td>kafka的存储文件都是按照offset.kafka来命名，用offset做名字的好处是方便查找。例如你想找位于2049的位置，只要找到2048.kafka的文件即可。当然the first offset就是00000000000.kafka</td></tr></tbody></table><h5 id="consumer与topic关系" tabindex="-1">Consumer与topic关系 <a class="header-anchor" href="#consumer与topic关系" aria-label="Permalink to &quot;Consumer与topic关系&quot;">​</a></h5><p>本质上kafka只支持Topic；</p><ul><li><p>每个group中可以有多个consumer，每个consumer属于一个consumer group； 通常情况下，一个group中会包含多个consumer，这样不仅可以提高topic中消息的并发消费能力，而且还能提高&quot;故障容错&quot;性，如果group中的某个consumer失效那么其消费的partitions将会有其他consumer自动接管。</p></li><li><p>对于Topic中的一条特定的消息，只会被订阅此Topic的每个group中的其中一个consumer消费，此消息不会发送给一个group的多个consumer； 那么一个group中所有的consumer将会交错的消费整个Topic，每个group中consumer消息消费互相独立，我们可以认为一个group是一个&quot;订阅&quot;者。</p></li><li><p>在kafka中,一个partition中的消息只会被group中的一个consumer消费(同一时刻)； 一个Topic中的每个partions，只会被一个&quot;订阅者&quot;中的一个consumer消费，不过一个consumer可以同时消费多个partitions中的消息。</p></li><li><p>kafka的设计原理决定,对于一个topic，同一个group中不能有多于partitions个数的consumer同时消费，否则将意味着某些consumer将无法得到消息。</p></li></ul><p>kafka只能保证一个partition中的消息被某个consumer消费时是顺序的；事实上，从Topic角度来说,当有多个partitions时,消息仍不是全局有序的。</p><h5 id="kafka消息的分发" tabindex="-1">Kafka消息的分发 <a class="header-anchor" href="#kafka消息的分发" aria-label="Permalink to &quot;Kafka消息的分发&quot;">​</a></h5><p>Producer客户端负责消息的分发</p><ul><li>kafka集群中的任何一个broker都可以向producer提供metadata信息,这些metadata中包含&quot;集群中存活的servers列表&quot;/&quot;partitions leader列表&quot;等信息；</li><li>当producer获取到metadata信息之后, producer将会和Topic下所有partition leader保持socket连接；</li><li>消息由producer直接通过socket发送到broker，中间不会经过任何&quot;路由层&quot;，事实上，消息被路由到哪个partition上由producer客户端决定； 比如可以采用&quot;random&quot;&quot;key-hash&quot;&quot;轮询&quot;等,如果一个topic中有多个partitions,那么在producer端实现&quot;消息均衡分发&quot;是必要的。</li><li>在producer端的配置文件中,开发者可以指定partition路由的方式。</li></ul><p>Producer消息发送的应答机制 设置发送数据是否需要服务端的反馈,有三个值0,1,-1 0: producer不会等待broker发送ack 1: 当leader接收到消息之后发送ack -1: 当所有的follower都同步消息成功后发送ack request.required.acks=0</p><h5 id="consumer的负载均衡" tabindex="-1">Consumer的负载均衡 <a class="header-anchor" href="#consumer的负载均衡" aria-label="Permalink to &quot;Consumer的负载均衡&quot;">​</a></h5><p>当一个group中,有consumer加入或者离开时,会触发partitions均衡.均衡的最终目的,是提升topic的并发消费能力，步骤如下：</p><ol><li>假如topic1,具有如下partitions: P0,P1,P2,P3</li><li>加入group中,有如下consumer: C1,C2</li><li>首先根据partition索引号对partitions排序: P0,P1,P2,P3</li><li>根据consumer.id排序: C0,C1</li><li>计算倍数: M = [P0,P1,P2,P3].size / [C0,C1].size,本例值M=2(向上取整)</li><li>然后依次分配partitions: C0 = [P0,P1],C1=[P2,P3],即Ci = [P(i * M),P((i + 1) * M -1)] ![[../_resources/unknown_filename-947bfe7e.png]]</li></ol><h4 id="kafka文件存储基本结构" tabindex="-1">Kafka文件存储基本结构 <a class="header-anchor" href="#kafka文件存储基本结构" aria-label="Permalink to &quot;Kafka文件存储基本结构&quot;">​</a></h4><ul><li>在Kafka文件存储中，同一个topic下有多个不同partition，每个partition为一个目录，partiton命名规则为topic名称+有序序号，第一个partiton序号从0开始，序号最大值为partitions数量减1。</li><li>每个partion(目录)相当于一个巨型文件被平均分配到多个大小相等segment(段)数据文件中。但每个段segment file消息数量不一定相等，这种特性方便old segment file快速被删除。默认保留7天的数据。 ![[../_resources/unknown_filename-f189e515.png]]</li><li>每个partiton只需要支持顺序读写就行了，segment文件生命周期由服务端配置参数决定。（什么时候创建，什么时候删除） ![[../_resources/unknown_filename-5a9b52d2.png]]</li></ul><p>数据有序的讨论？ 一个partition的数据是否是有序的？ 间隔性有序，不连续 针对一个topic里面的数据，只能做到partition内部有序，不能做到全局有序。 特别加入消费者的场景后，如何保证消费者消费的数据全局有序的？伪命题。 只有一种情况下才能保证全局有序？就是只有一个partition。</p><h5 id="kafka-partition-segment" tabindex="-1">Kafka Partition Segment <a class="header-anchor" href="#kafka-partition-segment" aria-label="Permalink to &quot;Kafka Partition Segment&quot;">​</a></h5><ul><li>Segment file组成：由2大部分组成，分别为index file和data file，此2个文件一一对应，成对出现，后缀&quot;.index&quot;和“.log”分别表示为segment索引文件、数据文件。 ![[../_resources/unknown_filename-e57943d4.png]]</li><li>Segment文件命名规则：partion全局的第一个segment从0开始，后续每个segment文件名为上一个segment文件最后一条消息的offset值。数值最大为64位long大小，19位数字字符长度，没有数字用0填充。</li><li>索引文件存储大量元数据，数据文件存储大量消息，索引文件中元数据指向对应数据文件中message的物理偏移地址。 ![[../_resources/unknown_filename-9b59aaab.png]] 3，497：当前log文件中的第几条信息，存放在磁盘上的那个地方 上述图中索引文件存储大量元数据，数据文件存储大量消息，索引文件中元数据指向对应数据文件中message的物理偏移地址。 其中以索引文件中元数据3,497为例，依次在数据文件中表示第3个message(在全局partiton表示第368772个message)、以及该消息的物理偏移地址为497。</li><li>segment data file由许多message组成， qq物理结构如下：</li></ul><table tabindex="0"><thead><tr><th>关键字</th><th>解释说明</th></tr></thead><tbody><tr><td>8 byte offset</td><td>在parition(分区)内的每条消息都有一个有序的id号，这个id号被称为偏移(offset),它可以唯一确定每条消息在parition(分区)内的位置。即offset表示partiion的第多少message</td></tr><tr><td>4 byte message size</td><td>message大小</td></tr><tr><td>4 byte CRC32</td><td>用crc32校验message</td></tr><tr><td>1 byte “magic&quot;</td><td>表示本次发布Kafka服务程序协议版本号</td></tr><tr><td>1 byte “attributes&quot;</td><td>表示为独立版本、或标识压缩类型、或编码类型。</td></tr><tr><td>4 byte key length</td><td>表示key的长度,当key为-1时，K byte key字段不填</td></tr><tr><td>K byte key</td><td>可选</td></tr><tr><td>value bytes payload</td><td>表示实际消息数据。</td></tr></tbody></table><h5 id="kafka-查找message" tabindex="-1">Kafka 查找message <a class="header-anchor" href="#kafka-查找message" aria-label="Permalink to &quot;Kafka 查找message&quot;">​</a></h5><p>读取offset=368776的message，需要通过下面2个步骤查找。 ![[../_resources/unknown_filename-e57943d4.png]]</p><ol><li>查找segment file 00000000000000000000.index表示最开始的文件，起始偏移量(offset)为0 00000000000000368769.index的消息量起始偏移量368770 = 368769 + 1 00000000000000737337.index的起始偏移量为737338=737337 + 1 其他后续文件依次类推。 以起始偏移量命名并排序这些文件，只要根据offset <strong>二分查找</strong>文件列表，就可以快速定位到具体文件。当offset=368776时定位到00000000000000368769.index和对应log文件。</li><li>通过segment file查找message 当offset=368776时，依次定位到00000000000000368769.index的元数据物理位置和00000000000000368769.log的物理偏移地址 然后再通过00000000000000368769.log顺序查找直到offset=368776为止。</li></ol><h4 id="kafka常用命令" tabindex="-1">kafka常用命令 <a class="header-anchor" href="#kafka常用命令" aria-label="Permalink to &quot;kafka常用命令&quot;">​</a></h4><p>为了避免单点故障。一般是使用集群避免单点故障。</p><ol><li>启动zookeeper 在所有的机器上执行 /opt/zookeeper/zookeeper3.4/bin/zkServer.sh start ![[../_resources/unknown_filename-8ce61605.png]]</li><li>启动kafka集群 在所有的机器上执行 nohup kafka-server-start.sh /opt/kafka/kafka1.0.0/config/server.properties &amp; nohup 不中断 &amp; 后台运行 查看运行状态 ![[../_resources/unknown_filename-6128d640.png]]</li><li>查看kafka的主题topic kafka-topics.sh --list --zookeeper master:2181,slave1:2181,slave2:2181 kafka的元数据信息被保存在zookeeper中 下面是所有节点的信息: ![[../_resources/unknown_filename-f6fbe397.png]]</li><li>创建新主题topic 在任意一台机器上执行： kafka-topics.sh --create --topic qy93 --partitions 1 --replication-factor 3 --zookeeper master:2181,slave1:2181,slave2:2181 :partitions 1 创建一个分区,一个topic的消息放在一个分区上。多个分区要比一个分区写入的速度快。 :replication-factor 指定分区的副本数,一个消息要有三个副本。副本的数量不能超过集群的节点数。 ![[../_resources/unknown_filename-c0167491.png]] 使用zkui页面查看 ![[../_resources/unknown_filename-5d10defc.png]]</li><li>发送消息，生产消息 kafka-console-producer.sh --topic qy93 --broker-list master:9092,slave1:9092,slave2:9092 :broker-list 指的是kafka集群，9092是kafka默认端口号</li><li>接受消息，消费消息 kafka-console-consumer.sh --topic qy93 --zookeeper master:2181,slave1:2181,slave2:2181 --from-beginning :from-beginning消费旧消息</li></ol><h4 id="java实现kafka消息生产和消息消费" tabindex="-1">java实现kafka消息生产和消息消费 <a class="header-anchor" href="#java实现kafka消息生产和消息消费" aria-label="Permalink to &quot;java实现kafka消息生产和消息消费&quot;">​</a></h4>',32)),t("ol",null,[t("li",null,[e[2]||(e[2]=t("p",null,"创建springboot工程,添加jar包",-1)),a(d,null,{default:i(()=>[a(n,null,{default:i(()=>e[0]||(e[0]=[l("org.springframework.kafka")])),_:1}),a(s,null,{default:i(()=>e[1]||(e[1]=[l("spring-kafka")])),_:1})]),_:1})]),e[3]||(e[3]=t("li",null,[t("p",null,"编辑全局配置文件"),t("p",null,"#指定要连接的kafka集群地址 spring.kafka.bootstrap-servers=master:9092,slave1:9092,slave2:9092 #指定唯一的组标识 spring.kafka.consumer.group-id=qy93_group")],-1)),e[4]||(e[4]=t("li",null,[t("p",null,"创建消息生产者类"),t("p",null,'@Component @EnableScheduling public class KafkaProducer { @Autowired private KafkaTemplate kafkaTemplate; @Scheduled(cron = "0/1 * * * * *") public void sendMessage(){ String message="I love you !"+new Date(); // System.out.println(message); kafkaTemplate.send("qy93",message); } }')],-1)),e[5]||(e[5]=t("li",null,[t("p",null,"创建消息消费者类"),t("p",null,'@Component public class KafkaConsumer { @KafkaListener(topics = "qy93") public void getMessage(ConsumerRecord record){ System.out.println("接收到的消息："+record.value()+record.offset()); } }')],-1))]),e[7]||(e[7]=r('<h4 id="storm上游数据源之kakfa" tabindex="-1">Storm上游数据源之Kakfa <a class="header-anchor" href="#storm上游数据源之kakfa" aria-label="Permalink to &quot;Storm上游数据源之Kakfa&quot;">​</a></h4><h5 id="kafka是什么" tabindex="-1">Kafka是什么 <a class="header-anchor" href="#kafka是什么" aria-label="Permalink to &quot;Kafka是什么&quot;">​</a></h5><p>在流式计算中，Kafka一般用来缓存数据，Storm通过消费Kafka的数据进行计算。 KAFKA + STORM +REDIS</p><ul><li>Apache Kafka是一个开源消息系统，由Scala写成。是由Apache软件基金会开发的一个开源消息系统项目。</li><li>Kafka最初是由LinkedIn开发，并于2011年初开源。2012年10月从Apache Incubator毕业。该项目的目标是为处理实时数据提供一个统一、高通量、低等待的平台。</li><li>Kafka是一个分布式消息队列：生产者、消费者的功能。它提供了类似于JMS的特性，但是在设计实现上完全不同，此外它并不是JMS规范的实现。</li><li>Kafka对消息保存时根据Topic进行归类，发送消息者称为Producer,消息接受者称为Consumer,此外kafka集群有多个kafka实例组成，每个实例(server)成为broker。</li><li>无论是kafka集群，还是producer和consumer都依赖于zookeeper集群保存一些meta信息，来保证系统可用性</li></ul><h5 id="jms是什么" tabindex="-1">JMS是什么 <a class="header-anchor" href="#jms是什么" aria-label="Permalink to &quot;JMS是什么&quot;">​</a></h5><ol><li>JMS的基础 JMS是什么：JMS是Java提供的一套技术规范 JMS干什么用：用来异构系统 集成通信，缓解系统瓶颈，提高系统的伸缩性增强系统用户体验，使得系统模块化和组件化变得可行并更加灵活 通过什么方式：生产消费者模式（生产者、服务器、消费者） jdk，kafka，activemq…… ![[../_resources/unknown_filename-06455f36.png]]</li><li>JMS消息传输模型</li></ol><ul><li>点对点模式（一对一，消费者主动拉取数据，消息收到后消息清除） 点对点模型通常是一个基于拉取或者轮询的消息传送模型，这种模型从队列中请求信息，而不是将消息推送到客户端。这个模型的特点是发送到队列的消息被一个且只有一个接收者接收处理，即使有多个消息监听者也是如此。</li><li>发布/订阅模式（一对多，数据生产后，推送给所有订阅者） 发布订阅模型则是一个基于推送的消息传送模型。发布订阅模型可以有多种不同的订阅者，临时订阅者只在主动监听主题时才接收消息，而持久订阅者则监听主题的所有消息，即时当前订阅者不可用，处于离线状态。 queue.put（object） 数据生产 queue.take(object) 数据消费 ![[../_resources/unknown_filename-173ae5a2.png]]</li></ul><ol start="3"><li>JMS核心组件</li></ol><ul><li>Destination：消息发送的目的地，也就是前面说的Queue和Topic。</li><li>Message ：从字面上就可以看出是被发送的消息。</li><li>Producer： 消息的生产者，要发送一个消息，必须通过这个生产者来发送。</li><li>MessageConsumer： 与生产者相对应，这是消息的消费者或接收者，通过它来接收一个消息。 通过与ConnectionFactory可以获得一个connection 通过connection可以获得一个session会话。 ![[../_resources/unknown_filename-f698b3cf.png]]</li></ul><h5 id="常见的类jms消息服务器" tabindex="-1">常见的类JMS消息服务器 <a class="header-anchor" href="#常见的类jms消息服务器" aria-label="Permalink to &quot;常见的类JMS消息服务器&quot;">​</a></h5><ol><li>JMS消息服务器 ActiveMQ ActiveMQ 是Apache出品，最流行的，能力强劲的开源消息总线。ActiveMQ 是一个完全支持JMS1.1和J2EE 1.4规范的。主要特点：</li></ol><ul><li>多种语言和协议编写客户端。语言: Java, C, C++, C#, Ruby, Perl, Python, PHP。应用协议: OpenWire,Stomp REST,WS Notification,XMPP,AMQP</li><li>完全支持JMS1.1和J2EE 1.4规范 (持久化,XA消息,事务)</li><li>对Spring的支持,ActiveMQ可以很容易内嵌到使用Spring的系统里面去,而且也支持Spring2.0的特性</li><li>通过了常见J2EE服务器(如 Geronimo,JBoss 4, GlassFish,WebLogic)的测试,其中通过JCA 1.5 resource adaptors的配置,可以让ActiveMQ可以自动的部署到任何兼容J2EE 1.4 商业服务器上</li><li>支持多种传送协议:in-VM,TCP,SSL,NIO,UDP,JGroups,JXTA</li><li>支持通过JDBC和journal提供高速的消息持久化</li><li>从设计上保证了高性能的集群,客户端-服务器,点对点</li><li>支持Ajax</li><li>支持与Axis的整合</li><li>可以很容易得调用内嵌JMS provider,进行测试</li></ul><ol start="2"><li>分布式消息中间件 Metamorphosis Metamorphosis (MetaQ) 是一个高性能、高可用、可扩展的分布式消息中间件，类似于LinkedIn的Kafka，具有消息存储顺序写、吞吐量大和支持本地和XA事务等特性，适用于大吞吐量、顺序消息、广播和日志数据传输等场景，在淘宝和支付宝有着广泛的应用，现已开源。主要特点：</li></ol><ul><li>生产者、服务器和消费者都可分布</li><li>消息存储顺序写</li><li>性能极高,吞吐量大</li><li>支持消息顺序</li><li>支持本地和XA事务</li><li>客户端pull，随机读,利用sendfile系统调用，zero-copy ,批量拉数据</li><li>支持消费端事务</li><li>支持消息广播模式</li><li>支持异步发送消息</li><li>支持http协议</li><li>支持消息重试和recover</li><li>数据迁移、扩容对用户透明</li><li>消费状态保存在客户端</li><li>支持同步和异步复制两种HA</li><li>支持group commit</li></ul><ol start="3"><li>分布式消息中间件 RocketMQ RocketMQ 是一款分布式、队列模型的消息中间件，具有以下特点：</li></ol><ul><li>能够保证严格的消息顺序</li><li>提供丰富的消息拉取模式</li><li>高效的订阅者水平扩展能力</li><li>实时的消息订阅机制</li><li>亿级消息堆积能力</li><li>Metaq3.0 版本改名，产品名称改为RocketMQ</li></ul><ol start="4"><li>其他MQ</li></ol><ul><li>.NET消息中间件 DotNetMQ</li><li>基于HBase的消息队列 HQueue</li><li>Go 的 MQ 框架 KiteQ</li><li>AMQP消息服务器 RabbitMQ</li><li>MemcacheQ 是一个基于 MemcacheDB 的消息队列服务器。</li></ul><h5 id="为什么需要消息队列-重要" tabindex="-1">为什么需要消息队列（重要） <a class="header-anchor" href="#为什么需要消息队列-重要" aria-label="Permalink to &quot;为什么需要消息队列（重要）&quot;">​</a></h5><p>消息系统的核心作用就是三点：解耦，异步和并行 以用户注册的案列来说明消息系统的作用</p><ol><li>用户注册的一般流程 问题：随着后端流程越来越多，每步流程都需要额外的耗费很多时间，从而会导致用户更长的等待延迟。 ![[../_resources/unknown_filename-cec4bc5e.png]]</li><li>用户注册的并行执行 问题：系统并行的发起了4个请求，4个请求中，如果某一个环节执行1分钟，其他环节再快，用户也需要等待1分钟。如果其中一个环节异常之后，整个服务挂掉了。 ![[../_resources/unknown_filename-b93296de.png]]</li><li>用户注册的最终一致 保证主流程的正常执行、执行成功之后，发送MQ消息出去。 需要这个destination的其他系统通过消费数据再执行，最终一致。 ![[../_resources/unknown_filename-c273d2e7.png]] ![[../_resources/unknown_filename-08e08ce8.png]]</li></ol>',21))])}const _=k(c,[["render",f]]);export{P as __pageData,_ as default};
