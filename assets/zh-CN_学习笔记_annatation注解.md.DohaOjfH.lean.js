import{_ as t,c as e,a3 as n,o}from"./chunks/framework.BaR4VHXY.js";const p=JSON.parse('{"title":"annatation注解","description":"","frontmatter":{"Created at":"2019-03-25T00:00:00.000Z","Last updated at":"2019-03-25T00:00:00.000Z","tags":["java注解和泛型"]},"headers":[],"relativePath":"zh-CN/学习笔记/annatation注解.md","filePath":"zh-CN/学习笔记/annatation注解.md","lastUpdated":null}'),r={name:"zh-CN/学习笔记/annatation注解.md"};function i(s,a,l,d,c,u){return o(),e("div",null,a[0]||(a[0]=[n('<h1 id="annatation注解" tabindex="-1">annatation注解 <a class="header-anchor" href="#annatation注解" aria-label="Permalink to &quot;annatation注解&quot;">​</a></h1><h2 id="annatation注解-1" tabindex="-1">annatation注解 <a class="header-anchor" href="#annatation注解-1" aria-label="Permalink to &quot;annatation注解&quot;">​</a></h2><p>在java中主要分基本注解和元注解两个分类</p><h3 id="基本注解" tabindex="-1">基本注解 <a class="header-anchor" href="#基本注解" aria-label="Permalink to &quot;基本注解&quot;">​</a></h3><p>@override：制定方法重写 @deprecated:方法不建议使用了，已经过时的方法，一般都有新的替代方法。 @SuppressWarnings：抑制告警注解： (&quot;unused&quot;)：变量未使用, (&quot;rawtypes&quot;）:不指定泛型, (&quot;unchecked&quot;)：抑制检查告警, (&quot;all&quot;)：抑制所有的告警</p><h3 id="元注解" tabindex="-1">元注解 <a class="header-anchor" href="#元注解" aria-label="Permalink to &quot;元注解&quot;">​</a></h3><p>@target  指定注解使用的场合。 ![[../_resources/Image.4.png]] @retention 指定注解生效的阶段（源码，class，运行） ![[../_resources/Image.3.png]] 自定义注解,分两种：一种是上面带参数的，还有一种没有参数的（标识性注解）： ![[../_resources/Image.2.png]]</p><h3 id="java的参数化类型被称为泛型-generic" tabindex="-1">Java的参数化类型被称为泛型（Generic） <a class="header-anchor" href="#java的参数化类型被称为泛型-generic" aria-label="Permalink to &quot;Java的参数化类型被称为泛型（Generic）&quot;">​</a></h3><p>使用通配符 &lt;？&gt; 使用泛型通配符上限 &lt;？extends T&gt;  使用泛型通配符下限 &lt;？super T&gt;</p>',9)]))}const q=t(r,[["render",i]]);export{p as __pageData,q as default};
