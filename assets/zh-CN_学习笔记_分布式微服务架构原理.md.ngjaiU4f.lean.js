import{_ as a,c as n,a3 as l,o as i}from"./chunks/framework.BaR4VHXY.js";const _=JSON.parse('{"title":"分布式微服务架构原理","description":"","frontmatter":{"Created at":"2019-05-16T00:00:00.000Z","Last updated at":"2019-05-16T00:00:00.000Z","tags":["分布式","架构"]},"headers":[],"relativePath":"zh-CN/学习笔记/分布式微服务架构原理.md","filePath":"zh-CN/学习笔记/分布式微服务架构原理.md","lastUpdated":null}'),o={name:"zh-CN/学习笔记/分布式微服务架构原理.md"};function r(s,e,t,c,p,u){return i(),n("div",null,e[0]||(e[0]=[l('<h1 id="分布式微服务架构原理" tabindex="-1">分布式微服务架构原理 <a class="header-anchor" href="#分布式微服务架构原理" aria-label="Permalink to &quot;分布式微服务架构原理&quot;">​</a></h1><h2 id="分布式微服务架构原理-1" tabindex="-1">分布式微服务架构原理 <a class="header-anchor" href="#分布式微服务架构原理-1" aria-label="Permalink to &quot;分布式微服务架构原理&quot;">​</a></h2><h4 id="大型网站系统的特点" tabindex="-1">大型网站系统的特点 <a class="header-anchor" href="#大型网站系统的特点" aria-label="Permalink to &quot;大型网站系统的特点&quot;">​</a></h4><ul><li><p>高并发，大流量 google日平均pv（page view）35亿，日平均ip（独立访问者）是3亿，腾讯qq的最大在线用户数（2011）1.4亿。</p></li><li><p>高可靠，高可用 系统不间断运行。（异地容灾，平滑升级，集群&lt;n+1&gt;）</p></li><li><p>海量数据的存储，hdfs分布式文件系统（hadoop） tfs（淘宝的分布式文件系统） facebook每一周上传10亿张照片（3000T）</p></li><li><p>用户分布广泛，网络情况复杂 大型网站的用户分布全球，网络各个国家各不相同。例如我国三个网络运营商。</p></li><li><p>网络安全环境恶劣 因为互联网的开放性，大型网站不可避免的要面临黑客攻击。</p></li><li><p>需求变更频繁，频繁发布 一天发布10次以上的版本。（docker，jeikens）</p></li><li><p>好的系统是改出来的，不是设计出来的。 渐进式发展</p></li></ul><h4 id="大型网站架构演化发展历程" tabindex="-1">大型网站架构演化发展历程 <a class="header-anchor" href="#大型网站架构演化发展历程" aria-label="Permalink to &quot;大型网站架构演化发展历程&quot;">​</a></h4><ul><li>原始阶段的网站架构 应用程序，数据库，文件系统都在一台机器上。 例如淘宝当前就是从马云的房子创建的，当初访问的用户少，所以一台机器足够。 ![[../_resources/unknown_filename-2a5cc90b.png]]</li><li>应用服务和数据分离 随着业务发展，用户量上升，一台服务器逐渐不能够支持所有用户的正常访问。 好处:应用服务独占一台服务器，cpu，内存资源独占，运行速度提升。         数据库独占一台服务，存储的数据比以前多，速度比以前快。         文件服务器能够支持更多的用户读写文件资源。 ![[../_resources/unknown_filename-31ee8491.png]]</li><li>使用缓存提升网站速度 在互联网访问中有一个规律，二八定律，80%的访问都集中在20%的数据上面。对于这种20%的经常被访问的数据，一般都保存到缓存服务器上。请求有限查询缓存，如果命中，直接返回结果，速度大幅提升。 缺点：缓存资源有限，无法大规模扩展。存在单点故障。 解决方案：使用分布式缓存 分布式缓存的优点： 1)理论上可以无限制的扩展容量。常见的有redis集群。 2)高可靠，可靠性99.99999% ![[../_resources/unknown_filename-12928cc6.png]]</li><li>使用应用服务器集群解决高并发 负载均衡:软件实现的负载均衡（nginx）、硬件F5设备（路由器，交换机） ![[../_resources/unknown_filename-754fdd34.png]]</li><li>使用数据库服务器集群（读写分离）提升高可靠并发 ![[../_resources/unknown_filename-ebb4b729.png]]</li><li>使用cdn加速网站响应 背景：客户分布广泛，存在一种离服务器近的用户速度快，离服务器远的客户，或者国外的客户慢。 cdn服务器其实就是一个缓存服务器。 ![[../_resources/unknown_filename-04903f74.png]]</li><li>使用分布式文件系统 背景：文件系统存在单点故障，并且容量有限。 解决方案：使用hdfs类型的分布式文件系统，理论上大小无上限。 ![[../_resources/unknown_filename-550cf49d.png]]</li><li>使用搜索引擎解决大规模的用户对大规模的数据进行检索的需求 网站越来越大，商品信息越来越多，搜索商品的时候。高并发的大规模关键字检索，对数据库造成数据库挂死。 解决方案： 1:使用nosql数据库缓存 2:使用搜索引擎（ES，slor） ![[../_resources/unknown_filename-ebebc118.png]]</li><li>业务拆分 背景：随着业务发展，网站的业务复杂度直线上升，没有一个人能够理清所有的业务依赖。以前的业务被包装在一个应用中，那么服务器集群扩展的时候，会出现浪费。 解决方案：业务拆分 每一个业务独占一个工程，打出来的就是一个jar包，发布的时候可以使用一台独立的服务器。 ![[../_resources/unknown_filename-ec48ea2a.png]]</li><li>使用分布式微服务框架解决服务无法治理的问题 拆分之后的业务越来越多，多的没有办法管理。需要有一个框架来实现服务的治理。 dubbo以及springcloud来实现服务的发布，消费。 ![[../_resources/unknown_filename-e134bbcd.png]]</li></ul>',6)]))}const f=a(o,[["render",r]]);export{_ as __pageData,f as default};
